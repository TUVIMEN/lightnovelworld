#!/usr/bin/env python
# by Dominik Stanis≈Çaw Suchora <hexderm@gmail.com>
# License: GNU GPLv3

import time
import random
import hashlib
import os
import sys
import re
import argparse

# from curl_cffi import requests
import requests
import treerequests


def strtosha256(string):
    if isinstance(string, str):
        string = string.encode()

    return hashlib.sha256(string).hexdigest()


class lightnovelworld:
    def __init__(self, **kwargs):
        settings = {
            "user_agent": "Mozilla/5.0 (X11; Linux x86_64; rv:135.0) Gecko/20100101 Firefox/139.0",
            "browser": "firefox",
            "wait": 2,
            "wait_random": 3000,
        }
        settings.update(kwargs)

        self.ses = treerequests.Session(
            requests,
            requests.Session,
            treerequests.reliq,
            **settings,
        )

    def get_chapter(self, url):
        fname = strtosha256(url)
        if os.path.exists(fname):
            return

        rq = self.ses.get_html(url)
        title = rq.search(
            r'h1 itemprop=headline; [0] span .chapter-title | "%Di" trim / sed "s#/#|#g"'
        )

        if len(title) == 0:
            raise Exception("failed getting chapter " + url)

        contents = rq.search(
            r'div #chapter-container; p child@ | "%DT\n\n" / trim "\n"'
        )

        with open(fname, "w") as f:
            f.write(title)
            f.write("\n\n")
            f.write(contents)

    def get_novel_chapters(self, url):
        nexturl = url
        while len(nexturl) != 0:
            rq = self.ses.get_html(nexturl)

            for i in rq.search(r'[0] ul .chapter-list; a title | "%(href)v\n"').split(
                "\n"
            )[:-1]:
                i = rq.ujoin(i)
                self.get_chapter(i)

            nexturl = rq.search(r'[0] li .PagedList-skipToNext; [0] a | "%(href)v"')
            if len(nexturl) == 0:
                break
            nexturl = rq.ujoin(nexturl)

    def get_novel(self, url):
        rq = self.ses.get_html(url)

        title = rq.search(r'[0] h1 .novel-title c@[0] | "%i" / sed "s#/#|#g"')
        if len(title) == 0:
            raise Exception("failed getting novel '$1'")

        try:
            os.mkdir(title)
        except FileExistsError:
            pass
        os.chdir(title)

        ch_url = url
        if ch_url[-1] == "/":
            ch_url = ch_url[:-1]
        ch_url += "/chapters"

        self.get_novel_chapters(ch_url)

        os.chdir("..")

    def get_pages(self, url):
        rq = self.ses.get_html(url)

        nexturl = url
        while len(nexturl) != 0:
            rq = self.ses.get_html(nexturl)

            for i in rq.search(
                r'li .novel-item; a [0] title href | "%(href)v\n"'
            ).split("\n")[:-1]:
                i = rq.ujoin(i)
                self.get_novel(i)

            nexturl = rq.search(r'[0] li .PagedList-skipToNext; [0] a | "%(href)v"')
            if len(nexturl) == 0:
                break
            nexturl = rq.ujoin(nexturl)

    def guess(self, url):
        if re.fullmatch(r"https://www.lightnovelworld.com?/novel/[^/]+/?", url):
            self.get_novel(url)
        elif re.fullmatch(
            r"https://www.lightnovelworld.com?/novel/[^/]+/chapters(\?page=[0-9]+)?",
            url,
        ):
            self.get_novel_chapters(url)
        elif re.fullmatch(r"https://www.lightnovelworld.com?/novel/[^/]+/[^/]+/?", url):
            self.get_chapter(url)
        elif re.fullmatch(
            r"https://www.lightnovelworld.com?/(browse/|ranking-|latest-updates-|searchadv/).*",
            url,
        ):
            self.get_pages(url)
        else:
            raise Exception("could not guess the url - '{}'".format(url))


def valid_directory(directory):
    try:
        return os.chdir(directory)
    except:
        raise argparse.ArgumentTypeError(
            'couldn\'t change directory to "{}"'.format(directory)
        )


def argparser():
    parser = argparse.ArgumentParser(
        description="Crude lightnovelworld.com scraper made in annoyance",
        add_help=False,
    )

    parser.add_argument(
        "urls",
        metavar="URL",
        nargs="*",
        help="url pointing to source, type of content is automatically guessed based on it",
    )

    general = parser.add_argument_group("General")
    general.add_argument(
        "-h",
        "--help",
        action="help",
        help="Show this help message and exit",
    )

    general.add_argument(
        "-d",
        "--directory",
        metavar="DIR",
        type=valid_directory,
        help="Change directory to DIR",
    )

    types = parser.add_argument_group("Types")
    types.add_argument(
        "--chapter",
        action="append",
        metavar="URL",
        type=str,
        help="Treats the following url as chapter",
        default=[],
    )
    types.add_argument(
        "--chapters",
        action="append",
        metavar="URL",
        type=str,
        help="Treats the following url as chapters list",
        default=[],
    )
    types.add_argument(
        "--novel",
        action="append",
        metavar="URL",
        type=str,
        help="Treats the following url as novel",
        default=[],
    )
    types.add_argument(
        "--pages",
        action="append",
        metavar="URL",
        type=str,
        help="Treats the following url as page of novels",
        default=[],
    )

    treerequests.args_section(parser)

    return parser


def main():
    args = argparser().parse_args(sys.argv[1:] if sys.argv[1:] else ["-h"])

    n = lightnovelworld(logger=sys.stderr)

    for i in args.chapter:
        n.get_chapter(i)
    for i in args.chapters:
        n.get_novel_chapters(i)
    for i in args.novel:
        n.get_novel(i)
    for i in args.pages:
        n.get_pages(i)

    for i in args.urls:
        n.guess(i)


main()
